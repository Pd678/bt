// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract Banking {

    mapping(address => uint) public user_account;
    mapping(address => bool) public user_exists;

    // Create a new account
    function create_account() public payable returns (string memory) {
        require(user_exists[msg.sender] == false, "Account already created");

        user_account[msg.sender] = msg.value;
        user_exists[msg.sender] = true;

        return "Account created successfully";
    }

    // Deposit money into account
    function deposit() public payable returns (string memory) {
        require(user_exists[msg.sender] == true, "Account not created");
        require(msg.value > 0, "Deposit amount must be greater than zero");

        user_account[msg.sender] = user_account[msg.sender] + msg.value;

        return "Deposit successful";
    }

    // Withdraw money from account
    function withdraw(uint amount) public returns (string memory) {
        require(user_exists[msg.sender] == true, "Account not created");
        require(user_account[msg.sender] >= amount, "Insufficient balance");
        require(amount > 0, "Withdrawal amount must be greater than zero");

        user_account[msg.sender] = user_account[msg.sender] - amount;
        msg.sender.transfer(amount);

        return "Withdrawal successful";
    }

    // Transfer money between accounts within the contract
    function transfer(address payable userAddress, uint amount) public returns (string memory) {
        require(user_exists[msg.sender] == true, "Sender account not created");
        require(user_exists[userAddress] == true, "Receiver account not created");
        require(user_account[msg.sender] >= amount, "Insufficient balance");
        require(amount > 0, "Transfer amount must be greater than zero");

        user_account[msg.sender] = user_account[msg.sender] - amount;
        user_account[userAddress] = user_account[userAddress] + amount;

        return "Transfer successful";
    }

    // Send amount to an external address
    function send_amt(address payable toAddress, uint256 amount) public payable returns(string memory) {
    require(user_exists[msg.sender], "Account not created");
    require(user_account[msg.sender] + msg.value >= amount, "Insufficient balance");

    user_account[msg.sender] = user_account[msg.sender] + msg.value - amount;
    toAddress.transfer(amount);

    return "Amount sent successfully";
}


    // Show user balance
    function user_balance() public view returns (uint) {
        return user_account[msg.sender];
    }

    // Check if account exists
    function account_exist() public view returns (bool) {
        return user_exists[msg.sender];
    }
}
